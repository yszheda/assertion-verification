module Test
use import int.Int
use import list.Append
use import list.List
use import list.Mem
type tupleType_r = {| a1: int; a2: int |}
type tupleType_r1 = {| b1: int; b2: int |}
predicate test ( r: list tupleType_r ) = 
( exists x: tupleType_r. mem x r /\ x.a1 > 1 )
(*
predicate test ( r: list tupleType_r ) = 
( exists x: tupleType_r. mem x r /\ x.a1 = 1 )
*)
predicate sc_predicate ( r_a1_value: int ) =
 ( r_a1_value > 0 ) 
let rec update r =
        { true }
        match r with
        | Nil -> Nil
        | Cons {| a1 = r_a1_value; a2 = r_a2_value |} l ->
                        if ( r_a1_value > 0 ) then ( Cons {| a1 = r_a1_value +
                        2; a2 = r_a2_value |} (update l) )
                        else ( Cons {| a1 = r_a1_value; a2 = r_a2_value |}
                        (update l) )
        end
        { test r -> test result }
let rec update1 r =
        { true }
        match r with
        | Nil -> Nil
        | Cons {| a1 = r_a1_value; a2 = r_a2_value |} l ->
                        if ( r_a1_value > 0 ) then ( Cons {| a1 = r_a1_value + 2; a2 = r_a2_value |} (update1 l) )
                        else ( Cons {| a1 = r_a1_value; a2 = r_a2_value |}
                        (update1 l) )
        end
        { test r -> 
                not (
                        (
                                forall x_r: tupleType_r. mem x_r r -> 
                                ( x_r.a1 > 1 -> x_r.a1 > 0 )
                        )
                        /\
                        not 
                        (
                                exists x_r: tupleType_r. mem x_r r /\
                                ( x_r.a1 > 0 /\ x_r.a1+2 > 1 )
                        )
                )
        }
end
